from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import logging
import students

TOKEN = "TOKEN"
COMMANDS = ['/add', '/remove', '/list', '/help']
logging.basicConfig(filename='info.log', level=logging.INFO)

class MyBot():
    def __init__(self, token:str):
        self._app = ApplicationBuilder().token(token).build()

    async def command_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
                "1. /add <–∏–º—è> - –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞.\n" \
                "2. /remove <–∏–º—è> - –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞.\n" \
                "4. /list - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."
        await update.message.reply_text(message)


    async def command_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:'
        for i in COMMANDS:
            message += f'\n{COMMANDS.index(i)+1}. ' + i
        await update.message.reply_text(message)
    

    async def command_add(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞'
        if len(context.args) != 1:
            message = '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç!\n/add <–∏–º—è> - –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞.'
        else:
            try:
                message = students.Students().create(context.args[0])
            except Exception as e:
                message = str(e)
        await update.message.reply_text(message)


    async def command_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = '–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:'
        for i in students.Students.students:
            message += f'\n{i}'
        await update.message.reply_text(message)
    

    async def command_remove(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = f'–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞'
        if len(context.args) != 1:
            message = '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç!\n/remove <–∏–º—è> - –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞.'
        else:
            try:
                message = students.Students().delete(context.args[0])
            except Exception as e:
                message = str(e)
        await update.message.reply_text(message)


    async def text_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message_text = update.message.text.lower()
        if message_text == "–≤–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞":
            await update.message.reply_text("–ø—Ñ, —ç—Ç–æ —Å–∫–∞–ºüòÇ")
        else:
            await update.message.reply_text(f"–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å. /help ?\n–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")


    def handlers(self):
        self._app.add_handler(CommandHandler("start", self.command_start))
        self._app.add_handler(CommandHandler("help", self.command_help))
        self._app.add_handler(CommandHandler("add", self.command_add))
        self._app.add_handler(CommandHandler("list", self.command_list))
        self._app.add_handler(CommandHandler("remove", self.command_remove))
        self._app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.text_handler))
    
    def start(self):
        self._app.run_polling()


if __name__ == "__main__":
    logging.info("START KASH-BOT")
    bot = MyBot(token=TOKEN)
    bot.handlers()
    bot.start()
